
Created by Diop Shumake on 3/27/25.

import SwiftUI
import WatchKit

struct TimerView: View {
    @State private var incidentCount: Double = 5
    @State private var startDate: Date?
    @State private var now = Date()
    @State private var isRunning = false
    @FocusState private var isFocused: Bool

    let shouldStartImmediately: Bool
    let timer = Timer.publish(every: 1, on: .main, in: .common).autoconnect()

    var elapsedTime: TimeInterval {
        guard let start = startDate else { return 0 }
        return now.timeIntervalSince(start)
    }

    var formattedTime: String {
        let hours = Int(elapsedTime) / 3600
        let minutes = (Int(elapsedTime) % 3600) / 60
        let seconds = Int(elapsedTime) % 60
        return String(format: "%d:%02d:%02d", hours, minutes, seconds)
    }

    var body: some View {
        VStack {
            Spacer()

            // Timer Display
            Text(formattedTime)
                .font(.title3)
                .padding(.bottom, 10)
                .onReceive(timer) { current in
                    if isRunning {
                        now = current
                    }
                }

            // Heart with Incidents Count
            ZStack {
                Image(systemName: "heart.fill")
                    .resizable()
                    .frame(width: 120, height: 120)
                    .foregroundColor(.red)

                VStack {
                    Text("Incidents")
                        .font(.headline)
                        .foregroundColor(.white)

                    Text("\(Int(incidentCount))")
                        .font(.largeTitle)
                        .bold()
                        .foregroundColor(.white)
                        .focusable()
                        .focused($isFocused)
                }
            }
            .padding(.vertical, 10)

            // Start & End Buttons
            HStack {
                Button(action: {
                    startDate = Date()
                    now = Date()
                    isRunning = true
                }) {
                    Text("Start")
                        .font(.body)
                        .padding()
                        .frame(width: 70)
                        .background(Color.green)
                        .foregroundColor(.white)
                        .clipShape(Capsule())
                }

                Button(action: {
                    isRunning = false
                }) {
                    Text("End")
                        .font(.body)
                        .padding()
                        .frame(width: 70)
                        .background(Color.red)
                        .foregroundColor(.black)
                        .clipShape(Capsule())
                }
            }
            .padding(.top, 5)

            Spacer()
        }
        .onAppear {
            if shouldStartImmediately && startDate == nil {
                startDate = Date()
                now = Date()
                isRunning = true
            }
        }
        .focusable()
        .digitalCrownRotation(
            $incidentCount,
            from: 0.0,
            through: 99.0,
            by: 1.0,
            sensitivity: .medium,
            isContinuous: true,
            isHapticFeedbackEnabled: true
        )
    }
}

#Preview {
    NavigationStack {
        TimerView(shouldStartImmediately: false)
    }
}
